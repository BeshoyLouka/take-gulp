{
  "name": "gulp-util",
  "description": "Utility functions for gulp plugins",
  "version": "2.2.9",
  "homepage": "http://github.com/wearefractal/gulp-util",
  "repository": {
    "type": "git",
    "url": "git://github.com/wearefractal/gulp-util.git"
  },
  "author": {
    "name": "Fractal",
    "email": "contact@wearefractal.com",
    "url": "http://wearefractal.com/"
  },
  "main": "./index.js",
  "dependencies": {
    "chalk": "~0.4.0",
    "lodash.template": "~2.4.1",
    "lodash._reinterpolate": "~2.4.1",
    "optimist": "~0.6.0",
    "vinyl": "~0.2.1",
    "through": "~2.3.4",
    "dateformat": "~1.0.7-1.2.3",
    "stream-combiner": "0.0.4"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "lodash.templatesettings": "~2.4.1",
    "event-stream": "~3.0.20"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "engines": {
    "node": ">= 0.9.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/wearefractal/gulp-util/raw/master/LICENSE"
    }
  ],
  "readme": "![status](https://secure.travis-ci.org/gulpjs/gulp-util.png?branch=master)\n\n## Information\n\n<table>\n<tr> \n<td>Package</td><td>gulp-util</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>Utility functions for gulp plugins</td>\n</tr>\n<tr>\n<td>Node Version</td>\n<td>>= 0.9</td>\n</tr>\n</table>\n\n## Usage\n\n```javascript\nvar gutil = require('gulp-util');\n\ngutil.log('stuff happened', 'Really it did', gutil.colors.cyan('123'));\ngutil.beep();\n\ngutil.replaceExtension('file.coffee', '.js'); // file.js\n\nvar opt = {\n  name: 'todd',\n  file: someGulpFile\n};\ngutil.template('test <%= name %> <%= file.path %>', opt) // test todd /js/hi.js\n```\n\n### log(msg...)\n\nLogs stuff. Already prefixed with [gulp] and all that. Use the right colors for values. If you pass in multiple arguments it will join them by a space.\n\n```\nvalues (files, module names, etc.) = magenta\nnumbers (times, counts, etc) = cyan\n```\n\n### colors\n\nThis is an instance of [chalk](https://github.com/sindresorhus/chalk)\n\n### date\n\nThis is an instance of [node-dateformat](https://github.com/felixge/node-dateformat).\n\n### linefeed\n\nJust `\\n`. Use this.\n\n### replaceExtension(path, newExtension)\n\nReplaces a file extension in a path. Returns the new path.\n\n### isStream(obj)\n\nReturns true or false if an object is a stream.\n\n### isBuffer(obj)\n\nReturns true or false if an object is a Buffer.\n\n### template(string[, data])\n\nThis is a lodash.template function wrapper. You must pass in a valid gulp file object so it is available to the user or it will error. You can not configure any of the delimiters. Look at the [lodash docs](http://lodash.com/docs#template) for more info.\n\n## new File(obj)\n\nThis is just [vinyl](https://github.com/wearefractal/vinyl)\n\n```javascript\nvar file = new gutil.File({\n  base: join(__dirname, './fixtures/'),\n  cwd: __dirname,\n  path: join(__dirname, './fixtures/test.coffee')\n});\n```\n\n## noop()\n\nReturns a stream that does nothing but pass data straight through.\n\n```javascript\ngulp.task('scripts', function() {\n  gulp.src('src/**/*.js')\n    .pipe(concat('script.js'))\n    .pipe(gulp.env.production ? uglify() : gutil.noop())\n    .pipe(gulp.dest('dist/');\n});\n```\n\n## combine(streams...)\n\nArgument may also be an array of streams. Returns a function that returns the combined stream. Useful for keeping things DRY. This is a simple wrapper around event-stream's `.pipeline`\n\n```javascript\nvar scripts = gutil.combine(\n    coffee({bare: true}),\n    uglify(),\n    concat('script.js'),\n    gulp.dest('dist/')\n);\n\ngulp.task('default', function() {\n  gulp.src('*.coffee').pipe(scripts());\n});\n```\n\n## buffer(cb)\n\nThis is similar to es.wait but instead of buffering text into one string it buffers anything into an array (so very useful for file objects).\n\nReturns a stream that can be piped to.\n\nThe stream will emit one data event after the stream piped to it has ended. The data will be the same array passed to the callback.\n\nCallback is optional and receives two arguments: error and data\n\n```javascript\ngulp.src('stuff/*.js')\n  .pipe(gutil.buffer(function(err, files){\n  \n  });\n```\n\n## new PluginError(pluginName, message[, options])\n\n- pluginName should be the module name of your plugin\n- message can be a string or an existing error\n- By default the stack will not be shown. Set `options.showStack` to true if you think the stack is important for your error.\n- If you pass an error in as the message the stack will be pulled from that, otherwise one will be created.\n\nThese are all acceptable forms of instantiation:\n\n```javascript\nvar err = new gutil.PluginError('test', {\n  message: 'something broke'\n});\n\nvar err = new gutil.PluginError({\n  plugin: 'test',\n  message: 'something broke'\n});\n\nvar err = new gutil.PluginError('test', 'something broke');\n\nvar err = new gutil.PluginError('test', 'something broke', {showStack: true});\n\nvar existingError = new Error('OMG');\nvar err = new gutil.PluginError('test', existingError, {showStack: true});\n```\n\n## LICENSE\n\n(MIT License)\n\nCopyright (c) 2013 Fractal <contact@wearefractal.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/wearefractal/gulp-util/issues"
  },
  "_id": "gulp-util@2.2.9",
  "_from": "gulp-util@"
}
